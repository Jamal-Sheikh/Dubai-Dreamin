@isTest
public class ImageTest {

 @TestSetup
  static void DemoData( ){
    Employee__c testEmployee = new Employee__c(Name ='Abdullah', Email__c = 'Abdullah123@gmail.com', Mobile__c = '12359999', Password__c = '564321',
    Designation__c= 'Manager', UserName__c = 'Abd@gmail.com', Profile_Image__c = '' );
    insert testEmployee;
    }

@isTest
public static void testDecodeImage( ) {

  Employee__c TestDataEmployee = [SELECT Id, Name, Email__c, Mobile__c, Password__c, Designation__c, UserName__c, Profile_Image__c
   from Employee__c WHERE Name ='Abdullah'];

    RestRequest req = new RestRequest();
    RestResponse res = new RestResponse();
    req.requestURI = '/services/apexrest/api/EmployeeImage/';
    req.httpMethod = 'POST';
    Map<String, object> requestBodyMap = new Map<String, String>();
    requestBodyMap.put('Employee_ID__c', TestDataEmployee.Id);
    requestBodyMap.put('Profile_Image__c', TestDataEmployee.Profile_Image__c);
    req.requestBody = Blob.valueOf(JSON.serialize(requestBodyMap));
        
    Test.startTest();
    RestContext.request = req;
    RestContext.response = res;
    ImageController.decodeImage();
    Test.stopTest();

    System.assertNotEquals(null, res.responseBody);
    Assert.isTrue(res.responseBody.toString().contains('200'), 'True It contains the correct response ');
    }
    
@isTest
 static void missingProfileImage() {
    Employee__c TestDataEmployee = [SELECT Id, Name, Email__c, Mobile__c, Password__c, Designation__c, UserName__c, Profile_Image__c
    from Employee__c WHERE Name ='Abdullah'];

    RestRequest req = new RestRequest();
    RestResponse res = new RestResponse();
    req.requestURI = '/services/apexrest/api/EmployeeImage/';
    req.httpMethod = 'POST';
    Map<String, object> requestBodyMap = new Map<String, String>();
    requestBodyMap.put('Employee_ID__c', TestDataEmployee.Id);
    req.requestBody = Blob.valueOf(JSON.serialize(requestBodyMap));
        
    Test.startTest();
    RestContext.request = req;
    RestContext.response = res;
    ImageController.decodeImage();
    Test.stopTest();
   System.assertNotEquals(null, res.responseBody);
   // Assert.isTrue(res.responseBody.toString().contains('200'), 'True It contains the correct response ');

    }
    
 @isTest
   public static void missingEmployeeId() {

   Employee__c TestDataEmployee = [SELECT Id, Name, Email__c, Mobile__c, Password__c, Designation__c, UserName__c, Profile_Image__c
   from Employee__c WHERE Name ='Abdullah'];

    RestRequest req = new RestRequest();
    RestResponse res = new RestResponse();
    req.requestURI = '/services/apexrest/api/EmployeeImage/';
    req.httpMethod = 'POST';
    Map<String, object> requestBodyMap = new Map<String, String>();
    requestBodyMap.put('Profile_Image__c', TestDataEmployee.Profile_Image__c);
    req.requestBody = Blob.valueOf(JSON.serialize(requestBodyMap));
        
    Test.startTest();
    RestContext.request = req;
    RestContext.response = res;
    ImageController.decodeImage();

    Test.stopTest();
    System.assertNotEquals(null, res.responseBody);
      
    }
    
}